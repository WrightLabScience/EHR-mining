# w <- which(astDF1$ORDER_DATE != astDF2$ORDER_DATE)
# # table(astDF1$NEXT_ORDER_DAY != astDF2$NEXT_ORDER_DAY)
# # table(astDF1$NEXT_RESULT_DAY != astDF2$NEXT_RESULT_DAY)
# length(w) # 468 (out of 37,983)
# # how often is the min(ORDER_DATE) earlier than the one that we get when choosing the min(RESULT_DATE)
# # answer: EVERY SINGLE TIME
# table(astDF1$ORDER_DATE[w] < astDF2$ORDER_DATE[w])
# rm(astDF2, w)
}
# Join ABXs and ASTs
empDF <- astDF %>%
mutate(JOIN_START = ORDER_DAY - 30,
JOIN_END = RESULT_DAY + 90) %>%
left_join(x = .,
y = abxDF,
by = join_by(PERSON_ID,
JOIN_START <= START_DATE,
JOIN_END >= START_DATE)) %>%
select(-JOIN_START, -JOIN_END) %>%
relocate(ABX, START_DATE, END_DATE, .before=BUG)
save(file = paste0(data_path_name, 'ASTs_AbxAdmin_blood_2017_2023_LONG.Rdata'))
save(empDF, file = paste0(data_path_name, 'ASTs_AbxAdmin_blood_2017_2023_LONG.Rdata'))
# collapse so one row per isolate
empDF <- empDF %>%
select(-BLOOD) %>%
mutate(START_DAY = as.Date(substr(START_DATE,1,10))) %>%
distinct() %>%
relocate(CONTAM, ABX, START_DATE, END_DATE, BUG, START_DAY, .before=CEFEPIME) %>%
group_by_all() %>% ungroup(ABX, START_DATE, END_DATE, START_DAY) %>%
reframe(DATE_OF_MOST_RECENT_ABX = max(START_DAY[START_DAY < ORDER_DAY]),
EMPIRIC0 = list(sort(unique(ABX[START_DAY == ORDER_DAY]))),
EMPIRIC1 = list(sort(unique(ABX[START_DAY == (ORDER_DAY+1)]))),
EMPIRIC2 = list(sort(unique(ABX[START_DAY == (ORDER_DAY+2) & START_DAY < RESULT_DAY]))),
EMPIRIC3 = list(sort(unique(ABX[START_DAY == (ORDER_DAY+3) & START_DAY < RESULT_DAY]))),
EMPIRIC4 = list(sort(unique(ABX[START_DAY == (ORDER_DAY+4) & START_DAY < RESULT_DAY]))),
EMPIRIC5 = list(sort(unique(ABX[START_DAY == (ORDER_DAY+5) & START_DAY < RESULT_DAY]))),
EMPIRIC6 = list(sort(unique(ABX[START_DAY == (ORDER_DAY+6) & START_DAY < RESULT_DAY]))),
EMPIRICR = list(sort(unique(ABX[START_DAY > (ORDER_DAY+6) & START_DAY < RESULT_DAY]))),
TARGETED = list(sort(unique(ABX[START_DAY == RESULT_DAY | START_DAY == RESULT_DAY + 1])))) %>%
ungroup() %>%
mutate(DELAY = as.integer(RESULT_DAY - ORDER_DAY)) %>%
relocate(DELAY, DATE_OF_MOST_RECENT_ABX, EMPIRIC0, EMPIRIC1, EMPIRIC2, EMPIRIC3, EMPIRIC4, EMPIRIC5, EMPIRIC6, EMPIRICR, TARGETED, .before=BUG)
empDF$DATE_OF_MOST_RECENT_ABX[is.infinite(empDF$DATE_OF_MOST_RECENT_ABX)] <- NA
empDF$DAYS_SINCE_MOST_RECENT_ABX <- as.integer(empDF$ORDER_DAY - empDF$DATE_OF_MOST_RECENT_ABX)
empDF <- empDF %>% select(-DATE_OF_MOST_RECENT_ABX)
print(Sys.time() - start) # ~1 minute
save(empDF, file = paste0(data_path_name, 'ASTs_AbxAdmin_blood_2017_2023.Rdata'))
gc()
load(file = paste0(data_path_name, 'ASTs_AbxAdmin_blood_2017_2023.Rdata'))
library(dplyr)
load(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/data_path_name.Rdata')
load(file = paste0(data_path_name, 'ASTs_AbxAdmin_blood_2017_2023.Rdata'))
t <- empDF %>%
summarise(n(),
meanT = mean(lengths(TARGETED)),
meanE = mean(lengths(EMPIRIC0)),
.by = c(MULT_BLOOD_ISO, MULT_ISO))
t
barplot(table(lengths(empDF$TARGETED[empDF$MULT_BLOOD_ISO])))
barplot(table(lengths(empDF$TARGETED[empDF$MULT_ISO])))
par(mfrow=c(2,2))
barplot(table(lengths(empDF$TARGETED[empDF$MULT_BLOOD_ISO])))
barplot(table(lengths(empDF$TARGETED[empDF$MULT_ISO])))
par(mfrow=c(2,2))
barplot(table(lengths(empDF$TARGETED[empDF$MULT_BLOOD_ISO])))
barplot(table(lengths(empDF$TARGETED[empDF$MULT_ISO])))
barplot(table(lengths(empDF$EMPIRIC0[empDF$MULT_BLOOD_ISO])))
barplot(table(lengths(empDF$EMPIRIC0[empDF$MULT_ISO])))
barplot(table(lengths(empDF$EMPIRIC1[empDF$MULT_BLOOD_ISO])))
barplot(table(lengths(empDF$EMPIRIC1[empDF$MULT_ISO])))
par(mfrow=c(3,2))
barplot(table(lengths(empDF$TARGETED[empDF$MULT_BLOOD_ISO])), main='Targeted course sizes (multiple blood isolates)')
barplot(table(lengths(empDF$TARGETED[!empDF$MULT_BLOOD_ISO])), main='Targeted course sizes (single blood isolate)')
barplot(table(lengths(empDF$EMPIRIC0[empDF$MULT_BLOOD_ISO])), main='Empiric0 course sizes (multiple blood isolates)')
barplot(table(lengths(empDF$EMPIRIC0[!empDF$MULT_BLOOD_ISO])), main='Empiric0 course sizes (single blood isolate)')
barplot(table(lengths(empDF$EMPIRIC1[empDF$MULT_BLOOD_ISO])), main='Empiric1 course sizes (multiple blood isolates)')
barplot(table(lengths(empDF$EMPIRIC1[!empDF$MULT_BLOOD_ISO])), main='Empiric1 course sizes (single blood isolate)')
m <- empDF$MULT_BLOOD_ISO
x=empDF$TARGETED
t <- table(m, x)
m
t <- table(m, lengths(x))
t
t <- apply(t, 1, function(x) x / sum(x) * 100)
t
t <- table(m, lengths(x))
t <- t(apply(t, 1, function(x) x / sum(x) * 100))
t
barplot(t)
barplot(t, beside=TRUE)
barplot(t, beside=TRUE, leg=TRUE)
makeBarplot <- function(x) {
t <- table(m, lengths(x))
t <- t(apply(t, 1, function(x) x / sum(x) * 100))
rownames(t)[rownames(t) == 'TRUE'] <- 'multiple'
rownames(t)[rownames(t) == 'FALSE'] <- 'single'
barplot(t, beside=TRUE, leg=TRUE, args.legend=list(title='# isolates'))
}
makeBarplot(x=empDF$TARGETED, main='Targeted course sizes')
makeBarplot <- function(x, main='') {
t <- table(empDF$MULT_BLOOD_ISO, lengths(x))
t <- t(apply(t, 1, function(x) x / sum(x) * 100))
rownames(t)[rownames(t) == 'TRUE'] <- 'multiple'
rownames(t)[rownames(t) == 'FALSE'] <- 'single'
barplot(t, beside=TRUE, main=main, leg=TRUE, args.legend=list(title='# isolates'))
}
par(mfrow=c(3,1))
makeBarplot(x=empDF$TARGETED, main='Targeted course sizes')
makeBarplot(x=empDF$EMPIRIC0, main='Empiric0 course sizes')
makeBarplot(x=empDF$EMPIRIC1, main='Empiric1 course sizes')
par(mfrow=c(1,1), mar=c(2,2,2,2))
makeBarplot(x=empDF$TARGETED, main='Targeted course sizes')
makeBarplot(x=empDF$EMPIRIC0, main='Empiric0 course sizes')
makeBarplot(x=empDF$EMPIRIC1, main='Empiric1 course sizes')
makeBarplot <- function(x, main='') {
t <- table(empDF$MULT_BLOOD_ISO, lengths(x))
t <- t(apply(t, 1, function(x) x / sum(x) * 100))
rownames(t)[rownames(t) == 'TRUE'] <- 'multiple'
rownames(t)[rownames(t) == 'FALSE'] <- 'single'
barplot(t, beside=TRUE, main=main, leg=TRUE, args.legend=list(title='# isolates'), ylab='%', xlab='# of antibiotics')
}
par(mfrow=c(1,1), mar=c(2,3,2,2))
makeBarplot(x=empDF$TARGETED, main='Targeted course sizes')
makeBarplot(x=empDF$EMPIRIC0, main='Empiric0 course sizes')
makeBarplot(x=empDF$EMPIRIC1, main='Empiric1 course sizes')
par(mfrow=c(1,1), mar=c(2,5,2,2))
makeBarplot(x=empDF$TARGETED, main='Targeted course sizes')
makeBarplot(x=empDF$EMPIRIC0, main='Empiric0 course sizes')
makeBarplot(x=empDF$EMPIRIC1, main='Empiric1 course sizes')
par(mfrow=c(1,1), mar=c(5,5,3,3))
makeBarplot(x=empDF$TARGETED, main='Targeted course sizes')
makeBarplot(x=empDF$EMPIRIC0, main='Empiric0 course sizes')
makeBarplot(x=empDF$EMPIRIC1, main='Empiric1 course sizes')
gc()
library(dplyr)
load(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/data_path_name.Rdata')
load(file = paste0(data_path_name, 'ASTs_AbxAdmin_blood_2017_2023.Rdata'))
abbr <- tibble(read.table(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/antibiotic_names/ABX_ABBR.txt', header = TRUE)) %>%
select(-Class) %>%
mutate(Antibiotic_Name = gsub('-', '/', Antibiotic_Name),
Antibiotic_Name = gsub('_', ' ', Antibiotic_Name),
Antibiotic_Name = toupper(Antibiotic_Name))
abbr <- setNames(abbr$Abbreviation, abbr$Antibiotic_Name)
abad <- unique(unlist(empDF %>% select(EMPIRIC0:TARGETED)))
abad <- abad[!abad %in% names(abbr)]
abbr <- c(abbr, setNames(abad, abad))
rm(abad)
makeBarplot(main='Empiric course (whole)')
# Empiric course and course size
makeBarplot <- function(main='') {
n <- 8
b <- barplot(rep(1, n), horize=T, plot=F)
x <- empDF$EMPIRIC0
if (grepl('whole', main))  x <- unlist(sapply(x, function(x) paste(abbr[x], collapse='+')))
if (grepl('single', main)) x <- abbr[unlist(x)]
h <- head(sort(table(x), decreasing = TRUE) / nrow(empDF), n)
names(h)[names(h) == ''] <- 'No abx'
barplot(h, horiz=TRUE, names.arg=NA, xlim=c(0,0.5), xpd=NA, main=main)
axis(side=2, at=b, labels=names(h), las=1, tick=F)
text(x = h + 0.01, y = b, adj = 0, xpd=NA, labels = paste0(round(h,3)*100, '%'))
}
makeBarplot(main='Empiric course (whole)')
makeBarplot(main='Empiric course (single)')
makePlot <- function(d, main='', targ=FALSE) {
x <- empDF[[paste0('EMPIRIC', d)]][empDF$DELAY > d]
if (targ) x <- empDF$TARGETED
n <- sum(empDF$DELAY > d)
x <- table(lengths(x)) / n
x <- c(x[names(x) %in% as.character(0:2)], sum(x[!names(x) %in% as.character(0:2)]))
names(x)[names(x) == ''] <- '>=3'
b <- barplot(x, plot=F)
barplot(x, ylim=c(0, 1), xlab='Number of antibiotics', yaxt='n',
main=main)
axis(side=2, las=1)
text(x = b, y = x+0.05, labels=paste0(round(x, 3) * 100, '%'))
}
par(mfrow=c(1,3), mgp=c(1.75,0.5,0), tck=-0.015)
par(mar=c(4, 3, 2.5, 1))
makePlot(0, 'Empiric course size')
par(mar=c(2.5, 5.5, 2.5, 2))
makeBarplot(main='Empiric course (whole)')
makeBarplot(main='Empiric course (single)')
gc()
library(dplyr)
library(dplyr)
load(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/data_path_name.Rdata')
load(file = paste0(data_path_name, 'ASTs_AbxAdmin_blood_2017_2023.Rdata'))
abbr <- setNames(abbr$Abbreviation, abbr$Antibiotic_Name)
abad <- unique(unlist(empDF %>% select(EMPIRIC0:TARGETED)))
abad <- abad[!abad %in% names(abbr)]
abbr <- c(abbr, setNames(abad, abad))
rm(abad)
abbr <- tibble(read.table(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/antibiotic_names/ABX_ABBR.txt', header = TRUE)) %>%
select(-Class) %>%
mutate(Antibiotic_Name = gsub('-', '/', Antibiotic_Name),
Antibiotic_Name = gsub('_', ' ', Antibiotic_Name),
Antibiotic_Name = toupper(Antibiotic_Name))
abbr <- setNames(abbr$Abbreviation, abbr$Antibiotic_Name)
abad <- unique(unlist(empDF %>% select(EMPIRIC0:TARGETED)))
abad <- abad[!abad %in% names(abbr)]
abbr <- c(abbr, setNames(abad, abad))
rm(abad)
View(empDF)
load(file = paste0(data_path_name, 'ASTs_AbxAdmin_blood_2017_2023.Rdata')
)
load(file = '~/Desktop/EHR/EHR work/RdataFiles/ASTs_AbxAdmin_blood_2017_2023.Rdata')
empDF
names(empDF)
empDF <- empDF %>% relocate(DAYS_SINCE_MOST_RECENT_ABX, .before=EMPIRIC0)
save(empDF, file = paste0(data_path_name, 'ASTs_AbxAdmin_blood_2017_2023.Rdata'))
save(empDF, file = '~/Desktop/EHR/EHR work/RdataFiles/ASTs_AbxAdmin_blood_2017_2023.Rdata')
library(dplyr)
load(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/data_path_name.Rdata')
load(file = paste0(data_path_name, 'ASTs_AbxAdmin_blood_2017_2023.Rdata'))
abbr <- tibble(read.table(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/antibiotic_names/ABX_ABBR.txt', header = TRUE)) %>%
select(-Class) %>%
mutate(Antibiotic_Name = gsub('-', '/', Antibiotic_Name),
Antibiotic_Name = gsub('_', ' ', Antibiotic_Name),
Antibiotic_Name = toupper(Antibiotic_Name))
abbr <- setNames(abbr$Abbreviation, abbr$Antibiotic_Name)
abad <- unique(unlist(empDF %>% select(EMPIRIC0:TARGETED)))
abad <- abad[!abad %in% names(abbr)]
abbr <- c(abbr, setNames(abad, abad))
rm(abad)
View(empDF)
library(dplyr)
load(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/data_path_name.Rdata')
load(file = paste0(data_path_name, 'ASTs_AbxAdmin_blood_2017_2023_LONG.Rdata'))
# determine the first
df <- empDF %>%
select(PERSON_ID, ORDER_DAY, RESULT_DAY, START_DATE, BUG) %>%
distinct() %>%
group_by(PERSON_ID, ORDER_DAY) %>%
slice_min(START_DATE, with_ties=FALSE) %>%
ungroup() %>%
mutate(START_DAY = as.Date(substr(START_DATE,1,10))) %>%
mutate(ABX_PROX_ORDER = as.integer(START_DAY - ORDER_DAY))
sum(is.na(df$START_DATE)) / nrow(df) # 10.1% had no abx in the 30 days beofre or after ORDER-->RESULT
sum(df$ABX_PROX_ORDER < 0, na.rm=T) / nrow(df)  # 18% had a prescription in the 30 days leading up to the ORDER_DAY
t <- table(df$ABX_PROX_ORDER)
t
any(diff(as.integer(names(t))) > 1)
t <- table(df$ABX_PROX_ORDER)
t <- t / sum(t)
t
#t <- c(t[1:4], sum(t[5:length(t)]))
#names(t)[length(t)] <- '>3'
t <- round(t*100, 1)
t
t <- table(df$ABX_PROX_ORDER)
t <- t / sum(t)
#t <- c(t[1:4], sum(t[5:length(t)]))
#names(t)[length(t)] <- '>3'
t <- t*100
b <- barplot(t, plot=FALSE)
{
#pdf(file = paste0(plots_path_name, 'DateOfFirstAbx.pdf'), width=5, height=3.5)
par(tck=-0.015, mgp=c(1.75, 0.75, 0), mar=c(5,3,5,3))
barplot(t, ylim=c(0,85), yaxt='n', names.arg=NA, main='When was the first antibiotic administered?', xlab='Days since AST order')
text(x = b, y = -6, labels=names(t), xpd=NA)
text(x = b, y = t + 4, labels=paste0(t, '%'))
#dev.off()
}
barplot(t, ylim=c(0,85), yaxt='n', names.arg=NA, main='When was the first antibiotic administered?', xlab='Days since AST order')
df
t <- table(df$ABX_PROX_ORDER)
t
t <- c(setNames(sum(t[names(t) %in% as.character(-30:-2)]), '> 1 day before'),
t[names(t) %in% as.character(-1:7)],
setNames(t[names(t) %in% as.character(8:200)], '> 1 week after'))
t
t <- table(df$ABX_PROX_ORDER)
setNames(sum(t[names(t) %in% as.character(-30:-2)]), '> 1 day before')
t[names(t) %in% as.character(-1:7)]
t[names(t) %in% as.character(8:200)], '> 1 week after')
setNames(t[names(t) %in% as.character(8:200)], '> 1 week after')
t <- c(setNames(sum(t[names(t) %in% as.character(-30:-2)]), '> 1 day before'),
t[names(t) %in% as.character(-1:7)],
setNames(sum(t[names(t) %in% as.character(8:200)]), '> 1 week after'))
t
t <- t / sum(t)
#t <- c(t[1:4], sum(t[5:length(t)]))
#names(t)[length(t)] <- '>3'
t <- t*100
barplot(t, ylim=c(0,85), yaxt='n', names.arg=NA, main='When was the first antibiotic administered?', xlab='Days since AST order')
text(x = b, y = -6, labels=names(t), xpd=NA)
barplot(t, ylim=c(0,85), yaxt='n', names.arg=NA, main='When was the first antibiotic administered?', xlab='Days since AST order')
text(x = b, y = -6, labels=names(t), xpd=NA)
t <- table(df$ABX_PROX_ORDER)
t <- c(setNames(sum(t[names(t) %in% as.character(-30:-2)]), '<-1day'),
t[names(t) %in% as.character(-1:7)],
setNames(sum(t[names(t) %in% as.character(8:200)]), '>1w'))
t <- t / sum(t)
#t <- c(t[1:4], sum(t[5:length(t)]))
#names(t)[length(t)] <- '>3'
t <- t*100
barplot(t, ylim=c(0,85), yaxt='n', names.arg=NA, main='When was the first antibiotic administered?', xlab='Days since AST order')
text(x = b, y = -6, labels=names(t), xpd=NA)
b <- barplot(t, plot=FALSE)
barplot(t, ylim=c(0,85), yaxt='n', names.arg=NA, main='When was the first antibiotic administered?', xlab='Days since AST order')
text(x = b, y = -6, labels=names(t), xpd=NA)
gc()
load(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/data_path_name.Rdata')
load(file = paste0(data_path_name, 'ASTs_AbxAdmin_blood_2017_2023.Rdata'))
empDF %>% filter(BUG == 'Serratia marcescen')
library(dplyr)
empDF %>% filter(BUG == 'Serratia marcescen')
empDF %>% filter(BUG == 'Serratia marcescens')
empDF %>% filter(BUG == 'Serratia marcescens') %>% count(VANCOMYCIN)
library(dplyr, quietly = TRUE)
load(file = '~/Desktop/EHR/EHR work/RdataFiles/ASTs_AbxAdmin_blood_2017_2023_flagged.Rdata')
load(file = '~/Desktop/EHR/EHR work/RdataFiles/ASTs_AbxAdmin_blood_2017_2023_imputed_flagged.Rdata')
abbr <- tibble(read.table(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/antibiotic_names/ABX_ABBR.txt', header = TRUE)) %>%
select(-Class) %>%
mutate(Antibiotic_Name = gsub('-', '/', Antibiotic_Name),
Antibiotic_Name = gsub('_', ' ', Antibiotic_Name),
Antibiotic_Name = toupper(Antibiotic_Name))
abbr <- setNames(abbr$Abbreviation, abbr$Antibiotic_Name)
abad <- unique(unlist(empDF %>% select(EMPIRIC0:TARGETED)))
abad <- abad[!abad %in% names(abbr)]
abbr <- c(abbr, setNames(abad, abad))
rm(abad)
load(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/plots_path_name.Rdata')
plots_path_name <- paste0(plots_path_name, 'BloodAbxAdmin/')
###########################################################
#### Empiric therapies / rates of discordance - BY BUG ####
###########################################################
makeFlagPlot <- function(e, main='', leg=FALSE, d) {
pcnt_disc <- round(d['DISCORDANT'] / sum(d), 3) * 100
n <- 8
b <- barplot(rep(1,n), plot=F)
h <- table(e$EMP0_ABBR, e$FLAG0)
h <- t(head(h[order(rowSums(h), decreasing=TRUE), ], n))
if (!'NOT TESTED' %in% rownames(h)) h <- rbind(h, 0); rownames(h)[nrow(h)] <- 'NOT TESTED'
h <- h[c('DISCORDANT', 'CONCORDANT', 'NOT TESTED', 'No empiric therapy given'), ]
colnames(h)[colnames(h) == ''] <- 'No abx'
barplot(h, horiz=TRUE, names.arg=rep('', ncol(h)), legend=leg, xpd=NA, xaxt='n', font.main=4,
col = gray.colors(n=4, start=0.2, end=0.92),
main=paste0(main, '\n(n = ', prettyNum(nrow(e), big.mark=','), ' - ', pcnt_disc, '% discordant)'))
axis(side=2, at=b, labels=colnames(h), las=1, tick=F)
text(x = colSums(h) + max(h)*0.01, y = b, adj = 0, xpd=NA, labels = colSums(h))
}
PlotBug <- function(bug, drug) {
bug_abbr <- gsub('^([A-Z])[a-z]+ ([a-z]+)$', '\\1_\\2', bug)
bug_abbr_main <- gsub('_', '\\. ', bug_abbr)
drug_abbr <- abbr[drug]
cat(bug, '-', drug, '\n')
e <- empDF %>% filter(BUG == bug) %>% mutate(!!drug := ifelse(is.na(get(drug)), -1, get(drug)))
t <- e %>% filter(FLAG0 != 'No empiric therapy given') %>% select(FLAG0, !!drug) %>% table()
layout(matrix(c(1,1,2,3), nrow=2, byrow=T))
par(mar=c(0.5,7,3,4), mgp=c(1.5, 0.5, 0))
makeFlagPlot(e=e, main=bug_abbr_main, leg=TRUE, d=rowSums(t))
makeFlagPlot(e=e %>% filter(get(drug) == 0L), main=paste0(bug_abbr_main, ' ', drug_abbr, '-S'), d=t[,'0'])
makeFlagPlot(e=e %>% filter(get(drug) == 1L), main=paste0(bug_abbr_main, ' ', drug_abbr, '-R'), d=t[,'1'])
}
bug <- 'Serratia marcescens'
bug_abbr <- gsub('^([A-Z])[a-z]+ ([a-z]+)$', '\\1_\\2', bug)
bug_abbr_main <- gsub('_', '\\. ', bug_abbr)
drug <- ''CEFTRIAXONE''
drug <- 'CEFTRIAXONE'
bug_abbr <- gsub('^([A-Z])[a-z]+ ([a-z]+)$', '\\1_\\2', bug)
bug_abbr_main <- gsub('_', '\\. ', bug_abbr)
drug_abbr <- abbr[drug]
cat(bug, '-', drug, '\n')
e <- empDF %>% filter(BUG == bug) %>% mutate(!!drug := ifelse(is.na(get(drug)), -1, get(drug)))
e
e %>% count(VANCOMYCIN)
library(dplyr, quietly = TRUE)
load(file = '~/Desktop/EHR/EHR work/RdataFiles/ASTs_AbxAdmin_blood_2017_2023_flagged.Rdata')
load(file = '~/Desktop/EHR/EHR work/RdataFiles/ASTs_AbxAdmin_blood_2017_2023_imputed_flagged.Rdata')
abbr <- tibble(read.table(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/antibiotic_names/ABX_ABBR.txt', header = TRUE)) %>%
select(-Class) %>%
mutate(Antibiotic_Name = gsub('-', '/', Antibiotic_Name),
Antibiotic_Name = gsub('_', ' ', Antibiotic_Name),
Antibiotic_Name = toupper(Antibiotic_Name))
abbr <- setNames(abbr$Abbreviation, abbr$Antibiotic_Name)
abad <- unique(unlist(empDF %>% select(EMPIRIC0:TARGETED)))
abad <- abad[!abad %in% names(abbr)]
abbr <- c(abbr, setNames(abad, abad))
rm(abad)
load(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/plots_path_name.Rdata')
plots_path_name <- paste0(plots_path_name, 'BloodAbxAdmin/')
bug <- 'Klebsiella pneumoniae'
df <- empDF %>% filter(BUG == bug)
t <- table(df$FIRST_CONC, df[[drug]])
drug <- 'PIPERACILLIN/TAZOBACTAM'
t <- table(df$FIRST_CONC, df[[drug]])
df[[drug]]
df$FIRST_CONC
library(dplyr)
load(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/data_path_name.Rdata')
load(file = paste0(data_path_name, 'ASTs_AbxAdmin_blood_2017_2023.Rdata'))
empDF %>% count(CONTAM)
empDF %>% count(MULT_BLOOD_ISO)
empDF
##################################
#### Day of first concordance ####
##################################
df <- empDF %>% select(FLAG0:FLAGT) %>% mutate(across(everything(), ~ ifelse(. == 'CONCORDANT', 1, 0)))
library(dplyr, quietly = TRUE)
load(file = '~/Desktop/EHR/EHR work/RdataFiles/ASTs_AbxAdmin_blood_2017_2023_flagged.Rdata')
load(file = '~/Desktop/EHR/EHR work/RdataFiles/ASTs_AbxAdmin_blood_2017_2023_imputed_flagged.Rdata')
abbr <- tibble(read.table(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/antibiotic_names/ABX_ABBR.txt', header = TRUE)) %>%
select(-Class) %>%
mutate(Antibiotic_Name = gsub('-', '/', Antibiotic_Name),
Antibiotic_Name = gsub('_', ' ', Antibiotic_Name),
Antibiotic_Name = toupper(Antibiotic_Name))
abbr <- setNames(abbr$Abbreviation, abbr$Antibiotic_Name)
abad <- unique(unlist(empDF %>% select(EMPIRIC0:TARGETED)))
abad <- abad[!abad %in% names(abbr)]
abbr <- c(abbr, setNames(abad, abad))
rm(abad)
load(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/plots_path_name.Rdata')
plots_path_name <- paste0(plots_path_name, 'BloodAbxAdmin/')
##################################
#### Day of first concordance ####
##################################
df <- empDF %>% select(FLAG0:FLAGT) %>% mutate(across(everything(), ~ ifelse(. == 'CONCORDANT', 1, 0)))
df <- apply(df, 1, function(x) which(x == 1)[1] - 1)
df[is.na(df)] <- 'never'
empDF$FIRST_CONC <- df
empDF <- empDF %>%
mutate(FIRST_CONC = case_when(
FIRST_CONC == '8' ~ as.character(DELAY),
FIRST_CONC == '7' ~ as.character(DELAY - 1),
.default = FIRST_CONC
)) %>%
relocate(FIRST_CONC, .before=FLAG0)
bug <- 'Klebsiella pneumoniae'
drug <- 'PIPERACILLIN/TAZOBACTAM'
df <- empDF %>% filter(BUG == bug)
t <- table(df$FIRST_CONC, df[[drug]])
t
df <- empDF %>% filter(BUG == bug, DELAY <= 7L)
t <- table(df$FIRST_CONC, df[[drug]])
t
t <- t(apply(t, 2, function(x) x / sum(x) * 100))
t
empDF
empDF %>% filter(BUG == bug) %>% count(VANCOMYCIN)
bug <- 'Enterococcus faecium'
df <- empDF %>% filter(BUG == bug)
df
df %>% filter(FLAG0 == 'DISCORDANT') %>% count(TARG_ABBR, sort=TRUE)
df %>% filter(FLAG0 == 'DISCORDANT', VANCOMYCIN == 1L) %>% count(TARG_ABBR, sort=TRUE)
df %>% filter(VANCOMYCIN == 1L) %>% count(TARG_ABBR, sort=TRUE)
getDF <- function(bug, drug, status) head(data.frame(sort(table(unlist(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status])))))
getDF(bug, 'VANCOMYCIN', 1)
getDF <- function(bug, drug, status) head(data.frame(sort(table(unlist(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status])), decreasing=TRUE)))
getDF(bug, 'VANCOMYCIN', 1)
bug <- 'Enterococcus faecium'
drug <- 'VANCOMYCIN'
getDF(bug, drug, 1)
getDF(bug, drug, 0)
head(data.frame(sort(table(abbr[unlist(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status])]), decreasing=TRUE)))
status <- 1
head(data.frame(sort(table(abbr[unlist(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status])]), decreasing=TRUE)))
bug
drug
status <- 0
head(data.frame(sort(table(abbr[unlist(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status])]), decreasing=TRUE)))
head(data.frame(sort(table(sapply(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status], \(x) paste(abbr[x], collapse='+'))), decreasing=TRUE)))
abbr <- c(abbr, setNames('No abx', ''))
head(data.frame(sort(table(abbr[unlist(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status])]), decreasing=TRUE)))
head(data.frame(sort(table(sapply(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status], \(x) paste(abbr[x], collapse='+'))), decreasing=TRUE)))
abbr <- tibble(read.table(file = '~/Desktop/EHR/EHR-mining/UsefulDataForCleaning/antibiotic_names/ABX_ABBR.txt', header = TRUE)) %>%
select(-Class) %>%
mutate(Antibiotic_Name = gsub('-', '/', Antibiotic_Name),
Antibiotic_Name = gsub('_', ' ', Antibiotic_Name),
Antibiotic_Name = toupper(Antibiotic_Name))
abbr <- setNames(abbr$Abbreviation, abbr$Antibiotic_Name)
abad <- unique(unlist(empDF %>% select(EMPIRIC0:TARGETED)))
abad <- abad[!abad %in% names(abbr)]
abbr <- c(abbr, setNames(abad, abad))
rm(abad)
getDF <- function(bug, drug, status) {
if (whole) {
x <- abbr[unlist(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status])]
x[x == ''] <- 'No abx'
head(data.frame(sort(table(x), decreasing=TRUE)))
} else if (!whole)
head(data.frame(sort(table(sapply(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status], \(x) paste(abbr[x], collapse='+'))), decreasing=TRUE)))
}
getDF(bug, drug, 1)
getDF(bug, drug, 1, TRUE)
getDF <- function(bug, drug, status, whole) {
if (whole) {
x <- abbr[unlist(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status])]
x[x == ''] <- 'No abx'
head(data.frame(sort(table(x), decreasing=TRUE)))
} else if (!whole)
head(data.frame(sort(table(sapply(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status], \(x) paste(abbr[x], collapse='+'))), decreasing=TRUE)))
}
getDF(bug, drug, 1, TRUE)
getDF(bug, drug, 0, TRUE)
getDF(bug, drug, 1, TRUE)
getDF(bug, drug, 1, FALSE)
x <- unlist(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status])
x
length(x)
empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status]
x <- sapply(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status], function(x) paste(abbr[x], collapse='+'))
x
x <- sapply(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status], function(x) abbr[x])
x
x <- sapply(empDF$TARGETED[empDF$BUG==bug & empDF[[drug]]==status], function(x) paste(abbr[x], collapse='+'))
x
x[x == ''] <- 'No abx'
head(data.frame(sort(table(x), decreasing=TRUE)))
t <- table(x)
t <- t / sum(t)
head(data.frame(sort(t, decreasing=TRUE)), n=8)
